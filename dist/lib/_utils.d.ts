import { EventObject, EventObjectInput } from './type/EventObject';
export declare const weekdaysArr: string[];
export declare const fullWeekdayNames: string[];
export declare const monthsArr: string[];
export declare const formatDate: (dateObj: Date, formatStr: string) => string;
export declare const parseDate: (dateStr: string, formatStr: string) => Date;
export declare const calculatePositions: (events: any[], isMonth: boolean) => any[];
export declare const convertToComponentEventFormat: (events: EventObjectInput[], dateFormat: string) => EventObject[];
export declare const isDateBetween: (dateObj: Date, startTime: string | number | Date, endTime: string | number | Date) => boolean;
export declare const setEventID: <T extends EventObjectInput | EventObject>(events: T[]) => T[];
export declare function findAncestor(el: HTMLElement, cls: string): HTMLElement | null;
export declare function isSameDay(date1: Date, date2: Date): boolean;
export declare function getDaysDifference(date1: Date, date2: Date): number;
export declare function addDays(date: Date, days: number): Date;
export declare function addTimeStringTodate(date: Date, time: string): Date;
export declare function eventObjectToEvent(eventObj: any): any;
export declare function getPreviousDay(dayNo: number | undefined, date?: Date): Date;
export declare const nextMonth: (date: Date) => Date;
export declare const prevMonth: (date: Date) => Date;
export declare const timeFormateFromHour: (hours: number, timeFormat: number) => string;
export declare const convertToOutputEventFormat: (eventObj: EventObject) => EventObjectInput;
export declare const isUpadteNeeded: (eventObj: EventObject, events: EventObject[]) => boolean;
export declare const convertTo12Hour: (timeStr: string) => string;
export declare const convertTo24HourFormat: (timeStr: string) => string;
